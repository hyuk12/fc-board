<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.fast.fcboard.service.CommentsServiceTest" tests="6" skipped="0" failures="0" errors="0" timestamp="2023-12-20T00:40:59" hostname="zephyrui-MacBookPro.local" time="0.064">
  <properties/>
  <testcase name="Then: 정상 생성됨을 확인한다." classname="com.fast.fcboard.service.CommentsServiceTest" time="0.017"/>
  <testcase name="Then: 게시글 존재하지 않음 예외가 발생한다." classname="com.fast.fcboard.service.CommentsServiceTest" time="0.002"/>
  <testcase name="Then: 정상 수정됨을 확인한다." classname="com.fast.fcboard.service.CommentsServiceTest" time="0.003"/>
  <testcase name="Then: 수정할 수 없는 댓글 예외가 발생한다." classname="com.fast.fcboard.service.CommentsServiceTest" time="0.001"/>
  <testcase name="Then: 정상 삭제됨을 확인한다." classname="com.fast.fcboard.service.CommentsServiceTest" time="0.002"/>
  <testcase name="Then: 삭제할 수 없는 댓글 예외가 발생한다." classname="com.fast.fcboard.service.CommentsServiceTest" time="0.002"/>
  <system-out><![CDATA[09:40:57.400 [Test worker @coroutine#2] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.fast.fcboard.service.CommentsServiceTest]: CommentsServiceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
09:40:57.451 [Test worker @coroutine#2] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.fast.fcboard.FcBoardApplication for test class com.fast.fcboard.service.CommentsServiceTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.1.6)

2023-12-20T09:40:57.606+09:00  INFO 46578 --- [er @coroutine#2] c.f.fcboard.service.CommentsServiceTest  : Starting CommentsServiceTest using Java 17.0.9 with PID 46578 (started by zephyr in /Users/zephyr/Desktop/workspace/study/fc-board)
2023-12-20T09:40:57.607+09:00  INFO 46578 --- [er @coroutine#2] c.f.fcboard.service.CommentsServiceTest  : No active profile set, falling back to 1 default profile: "default"
2023-12-20T09:40:57.924+09:00  INFO 46578 --- [er @coroutine#2] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-12-20T09:40:57.953+09:00  INFO 46578 --- [er @coroutine#2] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 25 ms. Found 2 JPA repository interfaces.
2023-12-20T09:40:58.114+09:00  INFO 46578 --- [er @coroutine#2] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2023-12-20T09:40:58.135+09:00  INFO 46578 --- [er @coroutine#2] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.2.13.Final
2023-12-20T09:40:58.137+09:00  INFO 46578 --- [er @coroutine#2] org.hibernate.cfg.Environment            : HHH000406: Using bytecode reflection optimizer
2023-12-20T09:40:58.241+09:00  INFO 46578 --- [er @coroutine#2] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2023-12-20T09:40:58.252+09:00  INFO 46578 --- [er @coroutine#2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2023-12-20T09:40:58.351+09:00  INFO 46578 --- [er @coroutine#2] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:test user=SA
2023-12-20T09:40:58.351+09:00  INFO 46578 --- [er @coroutine#2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2023-12-20T09:40:58.662+09:00  INFO 46578 --- [er @coroutine#2] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    create table comment (
        id bigint generated by default as identity,
        created_at timestamp(6),
        created_by varchar(255),
        updated_at timestamp(6),
        updated_by varchar(255),
        content varchar(255),
        post_id bigint,
        primary key (id)
    )
Hibernate: 
    create table post (
        id bigint generated by default as identity,
        created_at timestamp(6),
        created_by varchar(255),
        updated_at timestamp(6),
        updated_by varchar(255),
        content varchar(255),
        title varchar(255),
        primary key (id)
    )
Hibernate: 
    alter table if exists comment 
       add constraint FKs1slvnkuemjsq2kj4h3vhx7i1 
       foreign key (post_id) 
       references post
2023-12-20T09:40:58.688+09:00  INFO 46578 --- [er @coroutine#2] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-12-20T09:40:58.927+09:00  WARN 46578 --- [er @coroutine#2] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-12-20T09:40:59.098+09:00  INFO 46578 --- [er @coroutine#2] c.f.fcboard.service.CommentsServiceTest  : Started CommentsServiceTest in 1.598 seconds (process running for 4.05)
Hibernate: 
    insert 
    into
        post
        (content,created_at,created_by,title,updated_at,updated_by,id) 
    values
        (?,?,?,?,?,?,default)
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    insert 
    into
        comment
        (content,created_at,created_by,post_id,updated_at,updated_by,id) 
    values
        (?,?,?,?,?,?,default)
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    insert 
    into
        post
        (content,created_at,created_by,title,updated_at,updated_by,id) 
    values
        (?,?,?,?,?,?,default)
Hibernate: 
    insert 
    into
        comment
        (content,created_at,created_by,post_id,updated_at,updated_by,id) 
    values
        (?,?,?,?,?,?,default)
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    update
        comment 
    set
        content=?,
        created_at=?,
        created_by=?,
        post_id=?,
        updated_at=?,
        updated_by=? 
    where
        id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    insert 
    into
        post
        (content,created_at,created_by,title,updated_at,updated_by,id) 
    values
        (?,?,?,?,?,?,default)
Hibernate: 
    insert 
    into
        comment
        (content,created_at,created_by,post_id,updated_at,updated_by,id) 
    values
        (?,?,?,?,?,?,default)
Hibernate: 
    insert 
    into
        comment
        (content,created_at,created_by,post_id,updated_at,updated_by,id) 
    values
        (?,?,?,?,?,?,default)
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
Hibernate: 
    delete 
    from
        comment 
    where
        id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        c1_0.created_by,
        c1_0.post_id,
        c1_0.updated_at,
        c1_0.updated_by 
    from
        comment c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.created_at,
        p1_0.created_by,
        p1_0.title,
        p1_0.updated_at,
        p1_0.updated_by 
    from
        post p1_0 
    where
        p1_0.id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
